# cluster wwwphp
upstream php-upstream {
    server php:9000;
}

# cluster redis
upstream redis-upstream {
    server cache:6379;
    # a pool with at most 1024 connections
    # and do not distinguish the servers:
    keepalive 1024;
}

# proxy server
server {
    listen 80;
    server_name localhost;
    charset      utf-8;
    #access_log   /var/log/nginx/localhost/proxy-redis_access.log;
    #error_log    /var/log/nginx/localhost/proxy-redis_error.log debug;
    #error_log    /var/log/nginx/localhost/proxy-redis_error.log;

    # headers_more


    location / {
        default_type text/html;

        #ssi on;

        # toutes les requetes POST vont sur wwwphp
#        if ($request_method = POST) {
#            proxy_set_header Host $http_host;
#            proxy_set_header X-Real-IP $remote_addr;
#            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#            proxy_redirect off;
#            proxy_pass http://wwwphp;
#            break;
#        }

        #
        # Cache management
        #

        # catch the uri to used as a redis key (this requires the ngx_set_misc module)
        set_unescape_uri $key $host$request_uri;

        content_by_lua_file 'conf/cachemanager.lua';

    }


    #
    # This location is used to request the backend when the content is not in redis
    #
    location /fallback {
        # only internal redirections (/fallback can not be accessed directly)
        internal;

        # rewrite logs activation in the error_log file with notice level
        rewrite_log on;

        # headers_more
        more_set_headers 'X-Fallback: Yes';

        # rewrite before passing the request to the backend
        rewrite ^/fallback/(.*) /$1 break;

        #ssi on;

        root   /app;
        fastcgi_pass php-upstream;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root/index.php;
        include fastcgi_params;
    }


    #
    # This location is used to read in redis
    # using GET method : ?k=<a_key>
    #
    location /redis_read {
        internal;
        set_unescape_uri $k $arg_k;
        redis2_query HGETALL $k;

        redis2_connect_timeout 200ms;
        redis2_send_timeout 200ms;
        redis2_read_timeout 200ms;
        redis2_pass redis-upstream;

        # if redis does not respond, we request an emty string
        error_page 500 501 502 503 504 505 @empty_string;
    }


    #
    # This location is used to write content in redis
    # using POST method with the numbers of redis commands in the querystring (?n=...)
    #
    location /redis_write {
        internal;
        default_type text/html;

        # number of redis commands
        set_unescape_uri $n $arg_n;

        # we need to read body explicitly here...or $echo_request_body will evaluate to empty ("")
        echo_read_request_body;

# @debug
#echo "method: $echo_request_method";
#echo "body: $echo_request_body";

        redis2_raw_queries $n "$echo_request_body\r\n";

        redis2_connect_timeout 200ms;
        redis2_send_timeout 200ms;
        redis2_read_timeout 200ms;
        redis2_pass redis-upstream;
    }


    #
    # This location is used to delete content in redis
    # using GET methode : ?k=<a_key>
    #
    location /redis_flush {
#        internal;
        set_unescape_uri $k $arg_k;
        redis2_raw_query "EXPIRE $k 1\r\n";

        redis2_connect_timeout 200ms;
        redis2_send_timeout 200ms;
        redis2_read_timeout 200ms;
        redis2_pass redis-upstream;

        # if redis does not respond, we request an emty string
        error_page 500 501 502 503 504 505 @empty_string;
    }


    #
    # This location return an empty string
    #
    location @empty_string {
        internal;
        content_by_lua 'ngx.print("")';
    }


}
